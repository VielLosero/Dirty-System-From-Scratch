--- /pkg/repository/dirty-0.0/makers/a/acl/make.buildpkg.acl-2.3.2-x86_64-1_MLFS_current_Viel.sh	2025-08-08 06:50:40.344014103 +0000
+++ /pkg/repository/dirty-0.0/makers/a/acl/make.buildpkg.acl-2.3.2-x86_64-1_MLFS_current_Viel.sh.new	2025-08-09 23:49:55.050519260 +0000
@@ -33,8 +33,8 @@
 
 # Get Application init data from filename.
 cd $(dirname $0) ; SWD=$(pwd) # script work directory
-full_file_name="$0" ; file_name_no_path=${0##*/} 
-make_pkg_name="${file_name_no_path%.*}" ; build_pkg_name="${make_pkg_name/make./}" 
+full_file_name="$0" ; file_name=${0##*/} 
+make_pkg_name="${file_name%.*}" ; build_pkg_name="${make_pkg_name/make./}" 
 pkg_name=${build_pkg_name/buildpkg./} ; name="${pkg_name%-*-*-*}" 
 pkg_ver="${pkg_name%-*-*}" ; ver="${pkg_ver/$name-/}"
 pkg_arch="${pkg_name%-*}" ; arch=${pkg_arch/$name-$ver-/}
@@ -67,6 +67,11 @@
 OUTBUILD=${OUTBUILD:-$REPODIR/builders/$first_pkg_char/${name}/${build_pkg_name}.sh}
 OUTPKG=${OUTPKG:-$REPODIR/packages/$first_pkg_char/${name}/${pkg_name}.sh}
 
+# CHECK_RELEASE/Update tmp dirs
+MAKERS_UP_TO_DATE=/tmp/updates/repository/makers-up-to-date
+MAKERS_FAILED=/tmp/updates/repository/makers-failed
+MAKERS_WITH_NEW_VER=/tmp/updates/repository/makers-with-new-ver
+
 # Other need vars for example to change the default INSTALLDIR=$LFS.
 LFS=/mnt/lfs
 LFS_TGT=$(uname -m)-lfs-linux-gnu
@@ -93,31 +98,57 @@
 CHECK_RELEASE=${CHECK_RELEASE:-0}
 NEW=${NEW:-1}
 if [ $CHECK_RELEASE = 1 ] ; then 
-  last_version=$(echo "$($GETVER $version_url)" | tr ' ' '\n' | grep href.*${name}-[0-9].*tar.*z\" | cut -d'"' -f2 | sort -V | tail -1 | sed 's/.tar.*//' | cut -d'-' -f2 )
-  if [ -z "$last_version" ] ; then
-    echo "Version check: Failed." ; exit 1
+  [ ! -d $MAKERS_UP_TO_DATE ] && mkdir -vp $MAKERS_UP_TO_DATE
+  [ ! -d $MAKERS_FAILED ] && mkdir -vp $MAKERS_FAILED
+  [ ! -d $MAKERS_WITH_NEW_VER ] && mkdir -vp $MAKERS_WITH_NEW_VER
+	if [ -h $MAKERS_UP_TO_DATE/$file_name ] ; then
+    echo "Up to date: $file_name" ; exit 0
+	elif [ -h $MAKERS_WITH_NEW_VER/$file_name ] ; then
+    if [ $NEW = 1 ] ; then
+      echo "Need upgrade: $file_name" ; exit 2
+    fi
   else
-    if [ "$last_version" == "$ver" ] ; then 
-      echo "Version check: No new versions found." ; exit 0
+    last_version=$(echo "$($GETVER $version_url)" | tr ' ' '\n' | grep href.*${name}-[0-9].*tar.*z\" | cut -d'"' -f2 | sort -V | tail -1 | sed 's/.tar.*//' | cut -d'-' -f2 )
+    if [ -z "$last_version" ] ; then # fail.
+      if [ ! -h $MAKERS_FAILED/$file_name ] ; then
+        ln -s $0 $MAKERS_FAILED/$file_name
+      fi
+      echo "Version check: Failed." ; exit 1
     else
-      if [ $NEW = 0 ] ; then
-        NEWMAKE=${NEWMAKE:-$REPODIR/makers/$first_pkg_char/${name}/make.buildpkg.${name}-${last_version}-${arch}-${rel}.sh}
-        if $SPIDER ${file1_url}/${file1/$ver/$last_version} >/dev/null 2>&1 ; then 
-          if [ -e "$NEWMAKE" ] ; then
-            echo "Exist: $NEWMAKE" ; exit 0
-          else
-            cp $0 $NEWMAKE && echo "Created: $NEWMAKE" || exit 1 ; exit 2
+      if [ "$last_version" == "$ver" ] ; then # up to date.
+        ln -s $0 $MAKERS_UP_TO_DATE/$file_name
+        if [ -h $MAKERS_FAILED/$file_name ] ; then
+          rm $MAKERS_FAILED/$file_name
+        fi
+        echo "Version check: No new versions found." ; exit 0
+      else
+        if $SPIDER ${file1_url}/${file1/$ver/$last_version} >/dev/null 2>&1 ; then # new exist.
+          ln -s $0 $MAKERS_WITH_NEW_VER/$file
+	  		  if [ -h $MAKERS_FAILED/$file ] ; then
+	  			  rm $MAKERS_FAILED/$file
+	  		  fi
+          if [ $NEW = 1 ] ; then
+            echo "Version check: $name $last_version  $version_url" ; exit 2
           fi
         else
           echo "Failed: new version file not found." ; exit 1 
         fi
+      fi
+    fi
+  fi
+  if [ $NEW = 0 ] ; then 
+	  if [ -h $MAKERS_WITH_NEW_VER/$file_name ] ; then
+      NEWMAKE=${NEWMAKE:-$REPODIR/makers/$first_pkg_char/${name}/make.buildpkg.${name}-${last_version}-${arch}-${rel}.sh}
+      if [ -e "$NEWMAKE" ] ; then
+        echo "Exist: $NEWMAKE" ; exit 0
       else
-        echo "Version check: $name $last_version  $version_url" ; exit 2
+        cp $0 $NEWMAKE && echo "Created: $NEWMAKE" && exit 3 || exit 1 
       fi
-      echo "Version check: $name $last_version  $version_url" ; exit 2
     fi
   fi
-  exit 2
+  # if NEW != 0/1 or not exit begin that, stop the script to run only CHECK_RELEASE
+  echo "Check release done. Exiting." 
+  exit 1 
 fi
 
 # Make needed dirs.
@@ -149,7 +180,7 @@
 # echo first line to builder.
 echo "#!/bin/bash" > $OUTBUILD
 # copy header to builder
-sed -n '/^# --- LICENSE ---$/,/^# --- END CAT SEED ---$/p' $SWD/$file_name_no_path >> $OUTBUILD
+sed -n '/^# --- LICENSE ---$/,/^# --- END CAT SEED ---$/p' $SWD/$file_name >> $OUTBUILD
 # Cat EPOCH and dirs to builder.
 cat << 'EOF_OUTBUILD' >> $OUTBUILD
 
@@ -484,7 +515,7 @@
   # Start build pkg_name.sh
   echo "#!/bin/bash" > $OUTPKG
   # Copy script header to pkg.
-  sed -n '/^# --- LICENSE ---$/,/^# --- END CAT SEED ---$/p' $SWD/$file_name_no_path >> $OUTPKG
+  sed -n '/^# --- LICENSE ---$/,/^# --- END CAT SEED ---$/p' $SWD/$file_name >> $OUTPKG
   
   cat << 'EOF_OUTPKG' >> $OUTPKG
   if [ $# -eq 0 ]; then USAGE=1 ; fi
